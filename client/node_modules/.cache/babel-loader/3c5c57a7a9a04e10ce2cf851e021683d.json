{"ast":null,"code":"import _classCallCheck from \"D:\\\\streams\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\streams\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\streams\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\streams\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\streams\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\streams\\\\client\\\\src\\\\components\\\\stream\\\\StreamList.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchStreams } from '../../actions';\nimport { Link } from 'react-router-dom';\nimport './StreamList.css';\nimport faker from 'faker';\nimport InfiniteScroll from 'react-infinite-scroll-component';\n\nvar StreamList =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(StreamList, _React$Component);\n\n  function StreamList() {\n    _classCallCheck(this, StreamList);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(StreamList).apply(this, arguments));\n  }\n\n  _createClass(StreamList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.fetchStreams();\n    }\n  }, {\n    key: \"createButton\",\n    value: function createButton() {\n      if (this.props.isSignedIn) {\n        return React.createElement(\"div\", {\n          style: {\n            textAlign: 'right'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 18\n          },\n          __self: this\n        }, React.createElement(Link, {\n          to: \"/streams/new\",\n          className: \"ui positive button \",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 19\n          },\n          __self: this\n        }, \"CREATE STREAM\"));\n      }\n    }\n  }, {\n    key: \"renderAdmin\",\n    value: function renderAdmin(stream) {\n      if (stream.userId === this.props.currentUserId) {\n        return React.createElement(\"div\", {\n          className: \"ui two buttons\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 28\n          },\n          __self: this\n        }, React.createElement(Link, {\n          to: \"/streams/edit/\".concat(stream.id),\n          className: \"ui basic blue button\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 29\n          },\n          __self: this\n        }, \"EDIT\"), React.createElement(Link, {\n          to: \"/streams/delete/\".concat(stream.id),\n          className: \"ui basic red button\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32\n          },\n          __self: this\n        }, \"DELETE\"));\n      }\n    }\n  }, {\n    key: \"renderList\",\n    value: function renderList() {\n      var _this = this;\n\n      var streamList = this.props.streams.map(function (stream) {\n        return React.createElement(\"div\", {\n          className: \"card\",\n          key: stream.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43\n          },\n          __self: this\n        }, React.createElement(Link, {\n          to: \"/streams/\".concat(stream.id),\n          className: \"image\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          alt: \"Not Found\",\n          src: faker.image.image(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: \"content\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        }, React.createElement(Link, {\n          to: \"/streams/\".concat(stream.id),\n          className: \"header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          },\n          __self: this\n        }, stream.title), React.createElement(\"div\", {\n          className: \"description\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          },\n          __self: this\n        }, stream.description)), React.createElement(\"div\", {\n          className: \"extra content\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55\n          },\n          __self: this\n        }, _this.renderAdmin(stream)));\n      });\n      return streamList.slice(0, 12);\n    }\n  }, {\n    key: \"fetchMoreData\",\n    value: function fetchMoreData() {\n      var _this2 = this;\n\n      var streamList = this.props.streams.map(function (stream) {\n        return React.createElement(\"div\", {\n          className: \"card\",\n          key: stream.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70\n          },\n          __self: this\n        }, React.createElement(Link, {\n          to: \"/streams/\".concat(stream.id),\n          className: \"image\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          alt: \"Not Found\",\n          src: faker.image.image(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: \"content\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        }, React.createElement(Link, {\n          to: \"/streams/\".concat(stream.id),\n          className: \"header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75\n          },\n          __self: this\n        }, stream.title), React.createElement(\"div\", {\n          className: \"description\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78\n          },\n          __self: this\n        }, stream.description)), React.createElement(\"div\", {\n          className: \"extra content\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82\n          },\n          __self: this\n        }, _this2.renderAdmin(stream)));\n      });\n      return streamList;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"ui header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        className: \"ui left floated header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, \"Streams\"), React.createElement(\"div\", {\n        className: \"ui right floated header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, this.createButton())), React.createElement(\"div\", {\n        className: \"ui clearing divider\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"ui container\",\n        style: {\n          width: '1210px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(InfiniteScroll, {\n        dataLength: this.props.streams.length,\n        next: this.props.streams,\n        hasMore: true,\n        loader: React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106\n          },\n          __self: this\n        }, \"loading...\"),\n        endMessage: React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        }, \"end\"),\n        scrollableTarget: \"scrollableDiv\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"ui link cards\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, this.renderList()))));\n    }\n  }]);\n\n  return StreamList;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    streams: Object.values(state.streams),\n    currentUserId: state.auth.userId,\n    isSignedIn: state.auth.isSignedIn\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchStreams: fetchStreams\n})(StreamList);","map":{"version":3,"sources":["D:\\streams\\client\\src\\components\\stream\\StreamList.js"],"names":["React","connect","fetchStreams","Link","faker","InfiniteScroll","StreamList","props","isSignedIn","textAlign","stream","userId","currentUserId","id","streamList","streams","map","image","title","description","renderAdmin","slice","createButton","width","length","renderList","Component","mapStateToProps","state","Object","values","auth"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { fetchStreams } from '../../actions';\r\nimport { Link } from 'react-router-dom';\r\nimport './StreamList.css'\r\nimport faker from 'faker';\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\n\r\nclass StreamList extends React.Component {\r\n\r\n    componentDidMount() {\r\n        this.props.fetchStreams()\r\n    }\r\n    \r\n    createButton() {\r\n        if(this.props.isSignedIn){\r\n            return (\r\n                <div style={{ textAlign: 'right' }}>\r\n                    <Link to=\"/streams/new\" className=\"ui positive button \">CREATE STREAM</Link>\r\n                </div>\r\n            )   \r\n        }\r\n    }\r\n\r\n    renderAdmin(stream) {\r\n        if(stream.userId === this.props.currentUserId) {\r\n            return (\r\n                <div className=\"ui two buttons\">\r\n                    <Link to={`/streams/edit/${stream.id}`} className=\"ui basic blue button\">\r\n                        EDIT\r\n                    </Link>\r\n                    <Link to={`/streams/delete/${stream.id}`} className=\"ui basic red button\">\r\n                        DELETE\r\n                    </Link>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    renderList() {\r\n        const streamList = this.props.streams.map(stream => {\r\n            return (\r\n                <div className=\"card\" key={stream.id}>\r\n                    <Link to={`/streams/${stream.id}`} className=\"image\" >\r\n                        <img alt=\"Not Found\" src={faker.image.image()}/>\r\n                    </Link> \r\n                    <div className=\"content\">\r\n                        <Link to={`/streams/${stream.id}`} className=\"header\">\r\n                            {stream.title}\r\n                        </Link>\r\n                        <div className=\"description\">\r\n                            {stream.description}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"extra content\">\r\n                        {this.renderAdmin(stream)}\r\n                    </div>\r\n                </div>\r\n            )\r\n        })\r\n\r\n        \r\n\r\n        return streamList.slice(0, 12)\r\n    }\r\n\r\n    fetchMoreData() {\r\n        const streamList = this.props.streams.map(stream => {\r\n            return (\r\n                <div className=\"card\" key={stream.id}>\r\n                    <Link to={`/streams/${stream.id}`} className=\"image\" >\r\n                        <img alt=\"Not Found\" src={faker.image.image()}/>\r\n                    </Link> \r\n                    <div className=\"content\">\r\n                        <Link to={`/streams/${stream.id}`} className=\"header\">\r\n                            {stream.title}\r\n                        </Link>\r\n                        <div className=\"description\">\r\n                            {stream.description}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"extra content\">\r\n                        {this.renderAdmin(stream)}\r\n                    </div>\r\n                </div>\r\n            )\r\n        })\r\n\r\n        return streamList\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"ui header\">\r\n                    <h2 className=\"ui left floated header\">Streams</h2>\r\n                    <div className=\"ui right floated header\">{this.createButton()}</div>\r\n                </div>\r\n                <div className=\"ui clearing divider\"></div>\r\n                    <div className=\"ui container\" style={{ width: '1210px' }}>\r\n                            <InfiniteScroll\r\n                                dataLength={this.props.streams.length}\r\n                                next={this.props.streams}\r\n                                hasMore={true}\r\n                                loader={\r\n                                  <div>loading...</div>\r\n                                }\r\n                                endMessage={\r\n                                    <div>end</div>\r\n                                }\r\n                                scrollableTarget=\"scrollableDiv\"\r\n                            >\r\n                            <div className=\"ui link cards\">\r\n                                {this.renderList()}\r\n                            </div> \r\n                            </InfiniteScroll>\r\n                    </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return { \r\n        streams: Object.values(state.streams), \r\n        currentUserId: state.auth.userId,\r\n        isSignedIn: state.auth.isSignedIn\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { fetchStreams })(StreamList)"]},"metadata":{},"sourceType":"module"}