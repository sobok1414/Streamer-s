{"ast":null,"code":"import _classCallCheck from \"D:\\\\streams\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\streams\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\streams\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\streams\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\streams\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\streams\\\\client\\\\src\\\\components\\\\stream\\\\StreamList.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchStreams } from '../../actions';\nimport { Link } from 'react-router-dom';\nimport './StreamList.css';\nimport faker from 'faker';\nimport InfiniteScroll from 'react-infinite-scroll-component';\n\nvar StreamList =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(StreamList, _React$Component);\n\n  function StreamList() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, StreamList);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(StreamList)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      inital: true\n    };\n    _this.state = {\n      hasMore: true\n    };\n\n    _this.fetchStreams = function () {\n      return _this.props.streams;\n    };\n\n    return _this;\n  }\n\n  _createClass(StreamList, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.props.fetchStreams();\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      console.log(this.props.streams);\n    }\n  }, {\n    key: \"createButton\",\n    value: function createButton() {\n      if (this.props.isSignedIn) {\n        return React.createElement(\"div\", {\n          style: {\n            textAlign: 'right'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 26\n          },\n          __self: this\n        }, React.createElement(Link, {\n          to: \"/streams/new\",\n          className: \"ui positive button \",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 27\n          },\n          __self: this\n        }, \"CREATE STREAM\"));\n      }\n    }\n  }, {\n    key: \"renderAdmin\",\n    value: function renderAdmin(stream) {\n      if (stream.userId === this.props.currentUserId) {\n        return React.createElement(\"div\", {\n          className: \"ui two buttons\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36\n          },\n          __self: this\n        }, React.createElement(Link, {\n          to: \"/streams/edit/\".concat(stream.id),\n          className: \"ui basic blue button\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37\n          },\n          __self: this\n        }, \"EDIT\"), React.createElement(Link, {\n          to: \"/streams/delete/\".concat(stream.id),\n          className: \"ui basic red button\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40\n          },\n          __self: this\n        }, \"DELETE\"));\n      }\n    }\n  }, {\n    key: \"renderStream\",\n    value: function renderStream() {\n      var _this2 = this;\n\n      var streams = this.props.streams;\n      var inital = this.state.inital;\n\n      if (streams.length > 12) {\n        var streamList = streams.map(function (stream) {\n          return React.createElement(\"div\", {\n            className: \"card\",\n            key: stream.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 54\n            },\n            __self: this\n          }, React.createElement(Link, {\n            to: \"/streams/\".concat(stream.id),\n            className: \"image\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 55\n            },\n            __self: this\n          }, React.createElement(\"img\", {\n            alt: \"Not Found\",\n            src: faker.image.image(),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 56\n            },\n            __self: this\n          })), React.createElement(\"div\", {\n            className: \"content\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 58\n            },\n            __self: this\n          }, React.createElement(Link, {\n            to: \"/streams/\".concat(stream.id),\n            className: \"header\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 59\n            },\n            __self: this\n          }, stream.title), React.createElement(\"div\", {\n            className: \"description\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 62\n            },\n            __self: this\n          }, stream.description)), React.createElement(\"div\", {\n            className: \"extra content\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 66\n            },\n            __self: this\n          }, _this2.renderAdmin(stream)));\n        });\n\n        if (count === 1) {\n          return streamList.slice(0, 12);\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"ui header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        className: \"ui left floated header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, \"Streams\"), React.createElement(\"div\", {\n        className: \"ui right floated header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, this.createButton())), React.createElement(\"div\", {\n        className: \"ui clearing divider\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"ui container\",\n        style: {\n          width: '1210px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(InfiniteScroll, {\n        dataLength: 12,\n        next: this.fetchStreams,\n        hasMore: this.state.hasMore,\n        loader: React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        }, \"loading...\"),\n        endMessage: React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }, \"end\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"ui link cards\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, this.renderStream()))));\n    }\n  }]);\n\n  return StreamList;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    streams: Object.values(state.streams),\n    currentUserId: state.auth.userId,\n    isSignedIn: state.auth.isSignedIn\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchStreams: fetchStreams\n})(StreamList);","map":{"version":3,"sources":["D:\\streams\\client\\src\\components\\stream\\StreamList.js"],"names":["React","connect","fetchStreams","Link","faker","InfiniteScroll","StreamList","state","inital","hasMore","props","streams","console","log","isSignedIn","textAlign","stream","userId","currentUserId","id","length","streamList","map","image","title","description","renderAdmin","count","slice","createButton","width","renderStream","Component","mapStateToProps","Object","values","auth"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { fetchStreams } from '../../actions';\r\nimport { Link } from 'react-router-dom';\r\nimport './StreamList.css'\r\nimport faker from 'faker';\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\n\r\nclass StreamList extends React.Component {\r\n\r\n    state = { inital: true }\r\n\r\n    state = { hasMore: true }\r\n\r\n    componentWillMount() {\r\n        this.props.fetchStreams()\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(this.props.streams)\r\n    }\r\n    \r\n    createButton() {\r\n        if(this.props.isSignedIn){\r\n            return (\r\n                <div style={{ textAlign: 'right' }}>\r\n                    <Link to=\"/streams/new\" className=\"ui positive button \">CREATE STREAM</Link>\r\n                </div>\r\n            )   \r\n        }\r\n    }\r\n\r\n    renderAdmin(stream) {\r\n        if(stream.userId === this.props.currentUserId) {\r\n            return (\r\n                <div className=\"ui two buttons\">\r\n                    <Link to={`/streams/edit/${stream.id}`} className=\"ui basic blue button\">\r\n                        EDIT\r\n                    </Link>\r\n                    <Link to={`/streams/delete/${stream.id}`} className=\"ui basic red button\">\r\n                        DELETE\r\n                    </Link>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    renderStream() {\r\n        const { streams } = this.props\r\n        const { inital } = this.state\r\n        if(streams.length > 12){\r\n            const streamList = streams.map(stream => {\r\n                return (\r\n                    <div className=\"card\" key={stream.id}>\r\n                            <Link to={`/streams/${stream.id}`} className=\"image\" >\r\n                                <img alt=\"Not Found\" src={faker.image.image()}/>\r\n                            </Link> \r\n                            <div className=\"content\">\r\n                                <Link to={`/streams/${stream.id}`} className=\"header\">\r\n                                    {stream.title}\r\n                                </Link>\r\n                                <div className=\"description\">\r\n                                    {stream.description}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"extra content\">\r\n                                {this.renderAdmin(stream)}\r\n                            </div>\r\n                        </div>\r\n                    )\r\n            })\r\n            if(count === 1){\r\n                return streamList.slice(0, 12);\r\n            }\r\n        }\r\n    }\r\n\r\n    fetchStreams = () => {\r\n        return this.props.streams\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"ui header\">\r\n                    <h2 className=\"ui left floated header\">Streams</h2>\r\n                    <div className=\"ui right floated header\">{this.createButton()}</div>\r\n                </div>\r\n                <div className=\"ui clearing divider\"></div>\r\n                    <div className=\"ui container\" style={{ width: '1210px' }}>\r\n                            <InfiniteScroll\r\n                                dataLength={12}\r\n                                next={this.fetchStreams}\r\n                                hasMore={this.state.hasMore}\r\n                                loader={\r\n                                  <div>loading...</div>\r\n                                }\r\n                                endMessage={\r\n                                    <div>end</div>\r\n                                }\r\n                            >\r\n                            <div className=\"ui link cards\">\r\n                                {this.renderStream()}\r\n                            </div> \r\n                            </InfiniteScroll>\r\n                    </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return { \r\n        streams: Object.values(state.streams), \r\n        currentUserId: state.auth.userId,\r\n        isSignedIn: state.auth.isSignedIn\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { fetchStreams })(StreamList)"]},"metadata":{},"sourceType":"module"}